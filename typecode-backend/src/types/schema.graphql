type Mutation {
  createMessage(roomId: String, text: String!): createMessageResponse!
  createMyRoom(roomName: String!): createMyRoomResponse!
  login(email: String!, password: String!): TokenModel
  signup(name: String!, email: String!, password: String!): Boolean!
  follow(id: String!): Boolean
}

type Query {
  sendMessage(roomId: String!): Message
  fetchMyrooms: [Room!]
  tokens: [Token]!
  token: String!
  me: User!
  fetchUsers: User
}

type createMessageResponse {
  ok: Boolean!
  error: String
}

type createMyRoomResponse {
  ok: Boolean!
  error: String
}

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  createdAt: String!
  updatedAt: String!
}

type Room {
  id: ID!
  userId: String!
  roomName: String!
  participants: [User!]!
  messages: [RoomMessage!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type RoomMessage {
  id: ID!
  user: RoomUser!
  content: String
  createdAt: String!
  deletedAt: String
}

type RoomUser {
  name: String!
  email: String!
}

type Token {
  id: String
  userId: String
  accessedAt: String
  deleted: Boolean
  createdAt: String
  updatedAt: String
}

type TokenModel {
  token: String!
  access_token: String
  refresh_token: String
  token_type: String
  expires_in: Int
}

type User {
  id: ID!
  name: String!
  email: String!
  # password: String!
  profile: String
  phoneNumber: String
  verified: Boolean
  isOnline: Boolean
  following: [User!]!
  followers: [User!]!
  rooms: [Room!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

